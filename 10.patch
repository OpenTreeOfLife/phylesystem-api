From c7ef31b4e0af2ba4e7e491e62665631c47043f6b Mon Sep 17 00:00:00 2001
From: Jim Allman <jim@ibang.com>
Date: Sun, 6 Oct 2013 13:08:27 -0400
Subject: [PATCH 1/3] Added generic view for JSONP, modified GET method.

Addresses issue #9.

The GET method for fetching a study from OTOL API now passes a dict (as
required) to our generic JSON/P views. These now check for a
FULL_RESPONSE key in the dict; if found, the view renders this value and
ignores the surrounding dict.

The added 'generic.jsonp' view lets us support cross-domain API
requests. This should be triggered by the presence of a 'callback' or
'jsoncallback' argument in the request (see ```default.py``` controller
for an example).
---
 controllers/default.py | 14 ++++++++++----
 views/generic.json     | 10 +++++++++-
 views/generic.jsonp    | 19 +++++++++++++++++++
 3 files changed, 38 insertions(+), 5 deletions(-)
 create mode 100644 views/generic.jsonp

diff --git a/controllers/default.py b/controllers/default.py
index 91b292c..d0f9a13 100644
--- a/controllers/default.py
+++ b/controllers/default.py
@@ -10,10 +10,16 @@ def GET():
 @request.restful()
 def api():
     response.view = 'generic.json'
-    def GET(resource,resource_id):
-        if not resource=='study': raise HTTP(400)
-        # return the correct nexson of study_id
-        return _get_nexson(resource_id)
+
+    def GET(resource,resource_id,jsoncallback=None,callback=None,_=None):
+        if not resource=='study': raise HTTP(400, 'resource != study [GET]')
+
+        # support JSONP request from another domain
+        if jsoncallback or callback:
+            response.view = 'generic.jsonp'
+
+        # return the correct nexson of study_id, using the specified view
+        return dict(FULL_RESPONSE=_get_nexson(resource_id))
 
     def POST(resource,resource_id, **kwargs):
         if not resource=='study': raise HTTP(400, 'resource != study')
diff --git a/views/generic.json b/views/generic.json
index c44af16..36acf70 100644
--- a/views/generic.json
+++ b/views/generic.json
@@ -1,7 +1,15 @@
 {{
 try:
     from gluon.serializers import json
-    response.write(json(response._vars),escape=False)
+
+    # web2py view expects a dict, but we might have a single JSON response ready
+    full_response = response._vars.get('FULL_RESPONSE', None)
+    if full_response:
+        response.write(json(full_response),escape=False)
+    else:
+        response.write(json(response._vars),escape=False)
+    pass
+
     response.headers['Content-Type']='application/json'
 except:
     raise HTTP(405,'no json')
diff --git a/views/generic.jsonp b/views/generic.jsonp
new file mode 100644
index 0000000..f6eeab2
--- /dev/null
+++ b/views/generic.jsonp
@@ -0,0 +1,19 @@
+{{
+# adds support for cross-domain requests via JSONP
+try:
+    from gluon.serializers import json
+    cb_func_name = request.vars['jsoncallback'] or request.vars['callback']
+     
+    # web2py view expects a dict, but we might have a single JSON response ready
+    full_response = response._vars.get('FULL_RESPONSE', None)
+    if full_response:
+        cb_func_call = "%s(%s)" % (cb_func_name, json(full_response))
+    else:
+        cb_func_call = "%s(%s)" % (cb_func_name, json(response._vars))
+    pass
+
+    response.write(cb_func_call,escape=False)
+    response.headers['Content-Type']='application/jsonp'
+except:
+    raise HTTP(405,'no json')
+}}
-- 
1.8.4


From 53cea6a5e9823222ed11a2c92afd8894f8b31e5d Mon Sep 17 00:00:00 2001
From: Jim Allman <jim@ibang.com>
Date: Sun, 6 Oct 2013 15:14:41 -0400
Subject: [PATCH 2/3] Modified generic JSON/P views to handle lists

This matches our treatment of large files, passed to the view as a list of lines.

TODO: Consider using "raw" file iterator here?
---
 views/generic.json  |  7 ++++++-
 views/generic.jsonp | 13 ++++++++++++-
 2 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/views/generic.json b/views/generic.json
index 36acf70..92833b2 100644
--- a/views/generic.json
+++ b/views/generic.json
@@ -5,7 +5,12 @@ try:
     # web2py view expects a dict, but we might have a single JSON response ready
     full_response = response._vars.get('FULL_RESPONSE', None)
     if full_response:
-        response.write(json(full_response),escape=False)
+        # handle a large file passed as list-of-lines (or iterator?)
+        if type(full_response) == list:
+            for line in full_reponse:
+                response.write(line,escape=False)
+        else:
+            response.write(json(full_response),escape=False)
     else:
         response.write(json(response._vars),escape=False)
     pass
diff --git a/views/generic.jsonp b/views/generic.jsonp
index f6eeab2..69b7a78 100644
--- a/views/generic.jsonp
+++ b/views/generic.jsonp
@@ -7,7 +7,18 @@ try:
     # web2py view expects a dict, but we might have a single JSON response ready
     full_response = response._vars.get('FULL_RESPONSE', None)
     if full_response:
-        cb_func_call = "%s(%s)" % (cb_func_name, json(full_response))
+        cb_func_call = "%s(" % cb_func_name
+
+        # handle a large file passed as list-of-lines (or iterator?)
+        if type(full_response) == list:
+            for line in full_response:
+                cb_func_call += line
+            pass
+        else:
+            cb_func_call += full_response
+        pass
+        
+        cb_func_call += ")"
     else:
         cb_func_call = "%s(%s)" % (cb_func_name, json(response._vars))
     pass
-- 
1.8.4


From c127ac343bf8aa424e44a0066c40afcd29fe186c Mon Sep 17 00:00:00 2001
From: Jim Allman <jim@ibang.com>
Date: Sun, 6 Oct 2013 22:50:40 -0400
Subject: [PATCH 3/3] Add JSONP support to POST and curator's auth token

---
 controllers/default.py | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/controllers/default.py b/controllers/default.py
index d0f9a13..87accb5 100644
--- a/controllers/default.py
+++ b/controllers/default.py
@@ -21,7 +21,11 @@ def GET(resource,resource_id,jsoncallback=None,callback=None,_=None):
         # return the correct nexson of study_id, using the specified view
         return dict(FULL_RESPONSE=_get_nexson(resource_id))
 
-    def POST(resource,resource_id, **kwargs):
+    def POST(resource, resource_id, **kwargs):
+        # support JSONP request from another domain
+        if kwargs.get('jsoncallback',None) or kwargs.get('callback',None):
+            response.view = 'generic.jsonp'
+
         if not resource=='study': raise HTTP(400, 'resource != study')
 
         if resource_id < 0 : raise HTTP(400, 'invalid resource_id: must be a postive integer')
@@ -36,6 +40,8 @@ def POST(resource,resource_id, **kwargs):
 
         author_name  = kwargs.get('author_name','')
         author_email = kwargs.get('author_email','')
+        auth_token   = kwargs.get('auth_token','')  
+        # this is the GitHub API auth-token for a logged-in curator
 
         # overwrite the nexson of study_id with the POSTed data
         # 1) verify that it is valid json
-- 
1.8.4

